import Swinject

typealias ServiceResolver = Resolver

{% macro decl_args method %}{% filter removeNewlines:"leading" %}
    {% for param in method.parameters|annotated:"provided" %}
      {{param.argumentLabel}}: {{param.typeName}}
      {% ifnot forloop.last %}, {% endif %}
    {% endfor %}
{% endfilter %}{% endmacro %}

{% macro get_arguments method %}
  {% for param in method.parameters|annotated:"provided" %}
  {{forlopp.count}}
    {% if forloop.first %}, arguments:{% endif %}
    {{ param.argumentLabel }}
    {% ifnot forloop.last %}, {% endif %}
  {% endfor %}
{% endmacro %}

{% macro add_service type method %}
  func registeredService({% call decl_args method %}) -> {% call service_type type %} {
    {% filter removeNewlines:"leading" %}
      return resolve({{type.name}}.self{% call get_arguments method %})!
    {% endfilter %}
  }
{% endmacro %}

{% macro service_type service %}{% filter removeNewlines %}
  {% for key,value in service.annotations.inject where key == "type" %}
      {{value}}
  {% empty%}
      {{service.name}}
  {% endfor %}
{% endfilter %}{% endmacro %}

// swiftlint:disable all
/// Defines methods to access registered dependencies
extension ServiceResolver {
{% for type in types.all|annotated:"inject" %}
  {% for init in type.initializers|annotated:"inject" %}
    {% call add_service type init %}
  {% empty %}
    {% call add_service type type.initializers.first %}
  {% endfor %}

{% endfor %}

{% for provider in types.all|annotated:"provider" %}
  {% for method in provider.methods|static where method.callName == "instantiate" %}
    {% call add_service method.returnType method %}
  {% endfor %}
{% endfor %}
}

extension Resolver {
  public func resolve<T, U1>(_ serviceType: T.Type, arguments: U1) -> T? {
    return resolve(serviceType, argument: arguments)
  }
}
