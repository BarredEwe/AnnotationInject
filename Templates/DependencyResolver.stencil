import Swinject

{% macro decl_args method %}{% filter removeNewlines:"leading" %}
    {% for param in method.parameters|annotated:"provided" %}
      {{param.argumentLabel}}: {{param.typeName}}
      {% ifnot forloop.last %}, {% endif %}
    {% endfor %}
{% endfilter %}{% endmacro %}

{% macro get_arguments method %}
  {% for param in method.parameters|annotated:"provided" %}
  {{forlopp.count}}
    {% if forloop.first %}, arguments:{% endif %}
    {{ param.argumentLabel }}
    {% ifnot forloop.last %}, {% endif %}
  {% endfor %}
{% endmacro %}

{% macro add_resolver type method %}
  public func resolve({% call decl_args method %}) -> {{type.name}} {
    {% filter removeNewlines:"leading" %}
      return container.resolve({{type.name}}.self{% call get_arguments method %})!
    {% endfilter %}
  }
{% endmacro %}

/// Defines methods to access registered dependencies
public protocol SafeDependencyResolver: UnsafeDependencyResolver { }

extension SafeDependencyResolver {
{% for type in types.all|annotated:"inject" %}
  {% for init in type.initializers|annotated:"register" %}
    {% call add_resolver type init %}
  {% empty %}
    {% for init in type.initializers %}
      {# FIXME: Hack because we can't just take first element of array #}
      {% if forloop.first %}{% call add_resolver type init %}{% endif %}
    {% endfor %}
  {% endfor %}

{% endfor %}
}
