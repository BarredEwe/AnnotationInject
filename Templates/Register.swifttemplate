import Foundation
import Swinject
<%_ let imports = (argument["imports"] as? String)?.split(separator: ",") ?? [] -%>
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>

<%- include("AnnotationInject.swift") %>
<%- include("Partials/Method.swift") -%>
<%- include("Partials/Service.swift") -%>
<%- include("Partials/String.swift") -%>

<%_
  func factory(with service: Service) -> String {
    let serviceProvider = ServiceProvider(types: types)
    let factories = serviceProvider.findFactoryServices() + serviceProvider.findAnnotatedServices()
    
    let paramValues = serviceProvider.findParameterValues(for: service)

    return """
    { resolver\(prefixNonEmpty(concatParamNames(of: paramValues.runtimeParameters()), with: ",")) in
            \(service.registerTypeName)(\(concat(parametersWithValue(paramValues))))
        }
    """
  }

  func initCompleted(_ service: Service) -> String? {
    let (attributes, errors) = attributesAnnotatedInject(service.factory.definedInType!)
    let attributesStr = attributes.map { "service.\($0.name) = resolver.registeredService()" }
    let errorsStr = errors.map { "#error(\"\($0)\")"}
    let afterInit = attributesStr + errorsStr

    if attributes.isEmpty && errors.isEmpty {
        return nil
    }

    return """
    .initCompleted { service, resolver if
            \(afterInit.joined(separator: "\n       "))
        }
    """
  }

  func serviceOptions(_ service: Service) -> [String?] {
    return [
        initCompleted(service),
        service.scope.map { ".inObjectScope(.\($0))" }
    ]
  }
-%>

class AnnotationAssembly: Assembly {
  func assemble(container: Container) {
  <%_ for service in ServiceProvider(types: types).findAnnotatedServices() { -%>
    container.register(<%= service.factory.returnTypeName %>.self, factory: <%= factory(with: service) -%>)
    <%= serviceOptions(service).compactMap { $0 }.joined(separator: "\n") _%>
  <%_ } -%>

  <%_ for service in ServiceProvider(types: types).findFactoryServices() { -%>
    <%_ let method = service.factory -%>
    container.register(<%= method.returnTypeName %>.self, factory: <%= method.definedInTypeName?.name ?? "" %>.<%= method.selectorName %>)
  <%_ } -%>
  }
}
